{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;AACA;;AACA,IAAI,YAAY,QAAQ,WAAR,CAAhB;;AAEA;AACA;AACA,IAAI,YAAY,eAAhB;;AAEA,SAAS,WAAT,CAAqB,OAArB,EAA8B;AAC7B,KAAI,SAAS,CAAb;AACA,KAAI,UAAU,CAAd;AACA,KAAI,YAAY,CAAhB;;AAEA,MAAK,IAAI,CAAT,IAAc,OAAd,EAAuB;AACtB,MAAI,SAAS,QAAQ,CAAR,CAAb;AACA,MAAI,IAAI,OAAO,CAAP,CAAR;AACA,MAAI,IAAI,OAAO,CAAP,CAAR;;AAEA,MAAI,IAAI,OAAJ,IAAe,MAAM,OAAN,IAAiB,IAAI,SAAxC,EAAmD;AAClD,aAAU,CAAV;AACA,eAAY,CAAZ;AACA,YAAS,OAAO,CAAP,CAAT;AACA;AACD;;AAED,QAAO,MAAP;AACA;;AAED,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe;AAC/B,KAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC5B,QAAM,IAAI,SAAJ,CAAc,mBAAd,CAAN;AACA;;AAED;AACA,KAAI,OAAO,CAAX;AACA,KAAI,SAAS,CAAb;;AAEA;AACA,KAAI,OAAO,CAAX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI,UAAU,EAAd;;AAEA;AACA,KAAI,OAAJ;;AAEA;AACA,KAAI,QAAJ;;AAEA,KAAI,KAAJ,CAAU,KAAV,EAAiB,OAAjB,CAAyB,UAAU,IAAV,EAAgB;AACxC,MAAI,CAAC,IAAL,EAAW;AACV;AACA;AACA;;AAED,MAAI,MAAJ;AACA,MAAI,UAAU,KAAK,KAAL,CAAW,SAAX,CAAd;;AAEA,MAAI,CAAC,OAAL,EAAc;AACb,YAAS,CAAT;AACA,GAFD,MAEO;AACN,YAAS,QAAQ,CAAR,EAAW,MAApB;;AAEA,OAAI,QAAQ,CAAR,CAAJ,EAAgB;AACf;AACA,IAFD,MAEO;AACN;AACA;AACD;;AAED,MAAI,OAAO,SAAS,IAApB;AACA,SAAO,MAAP;;AAEA,MAAI,IAAJ,EAAU;AACT;;AAEA,cAAW,OAAO,CAAlB;;AAEA,aAAU,QAAQ,WAAW,IAAX,GAAkB,CAAC,IAA3B,CAAV;;AAEA,OAAI,OAAJ,EAAa;AACZ,YAAQ,CAAR;AACA,IAFD,MAEO;AACN,cAAU,QAAQ,IAAR,IAAgB,CAAC,CAAD,EAAI,CAAJ,CAA1B;AACA;AACD,GAZD,MAYO,IAAI,OAAJ,EAAa;AACnB;AACA,WAAQ,CAAR,KAAc,OAAO,QAAP,CAAd;AACA;AACD,EAxCD;;AA0CA,KAAI,SAAS,YAAY,OAAZ,CAAb;;AAEA,KAAI,IAAJ;AACA,KAAI,MAAJ;AACA,KAAI,CAAC,MAAL,EAAa;AACZ,SAAO,IAAP;AACA,WAAS,EAAT;AACA,EAHD,MAGO,IAAI,UAAU,IAAd,EAAoB;AAC1B,SAAO,OAAP;AACA,WAAS,UAAU,GAAV,EAAe,MAAf,CAAT;AACA,EAHM,MAGA;AACN,SAAO,KAAP;AACA,WAAS,UAAU,IAAV,EAAgB,MAAhB,CAAT;AACA;;AAED,QAAO;AACN,UAAQ,MADF;AAEN,QAAM,IAFA;AAGN,UAAQ;AAHF,EAAP;AAKA,CA3FD","file":"index-compiled.js","sourcesContent":["/* eslint-disable guard-for-in */\n'use strict';\nvar repeating = require('repeating');\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tvar result = 0;\n\tvar maxUsed = 0;\n\tvar maxWeight = 0;\n\n\tfor (var n in indents) {\n\t\tvar indent = indents[n];\n\t\tvar u = indent[0];\n\t\tvar w = indent[1];\n\n\t\tif (u > maxUsed || u === maxUsed && w > maxWeight) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = Number(n);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tvar tabs = 0;\n\tvar spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tvar prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tvar indents = {};\n\n\t// pointer to the array of last used indent\n\tvar current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tvar isIndent;\n\n\tstr.split(/\\n/g).forEach(function (line) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\treturn;\n\t\t}\n\n\t\tvar indent;\n\t\tvar matches = line.match(INDENT_RE);\n\n\t\tif (!matches) {\n\t\t\tindent = 0;\n\t\t} else {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t}\n\n\t\tvar diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents[isIndent ? diff : -diff];\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = indents[diff] = [1, 0];\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += Number(isIndent);\n\t\t}\n\t});\n\n\tvar amount = getMostUsed(indents);\n\n\tvar type;\n\tvar actual;\n\tif (!amount) {\n\t\ttype = null;\n\t\tactual = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tactual = repeating(' ', amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tactual = repeating('\\t', amount);\n\t}\n\n\treturn {\n\t\tamount: amount,\n\t\ttype: type,\n\t\tindent: actual\n\t};\n};\n"]}